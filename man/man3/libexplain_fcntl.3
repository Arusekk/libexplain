.\"
.\" libexplain - Explain errno values returned by libc functions
.\" Copyright (C) 2008 Peter Miller
.\" Written by Peter Miller <millerp@canb.auug.org.au>
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 3 of the License, or
.\" (at your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program. If not, see <http://www.gnu.org/licenses/>.
.\"
.ds n) libexplain_fcntl
.TH libexplain_fcntl 3
.SH NAME
libexplain_fcntl \- explain fcntl(2) errors
.XX "libexplain_fcntl(3)" "explain fcntl(2) errors"
.SH SYNOPSIS
#include <libexplain/fcntl.h>
.br
const char *libexplain_fcntl(int fildes, int command, long arg);
.br
const char *libexplain_errno_fcntl(int errnum, int fildes, int command,
long arg);
.br
void libexplain_message_fcntl(char *message, int message_size, int fildes,
int command, long arg);
.br
void libexplain_message_errno_fcntl(char *message, int message_size,
int errnum, int fildes, int command, long arg);
.SH DESCRIPTION
Thes efunctions may be used to obtain explanation
for \f[I]fcntl\fP(2) errors.
.\" ------------------------------------------------------------------------
.SS libexplain_fcntl
const char *libexplain_fcntl(int fildes, int command, long arg);
.PP
The libexplain_fcntl function is used to obtain an explanation of an
error returned by the \f[I]fcntl(2)\fP system call. The least the
message will contain is the value of \f[CW]strerror(errno)\fP, but
usually it will do much better, and indicate the underlying cause in
more detail.
.PP
The \f[I]errno\fP global variable will be used to obtain the error value
to be decoded.
.PP
This function is intended to be used in a fashion similar to the
following example:
.rS
.ft CR
.nf
int ok = fcntl(fd, command, arg);
if (ok < 0)
{
    fprintf(stderr, '%s\n', libexplain_fcntl(fd, command, arg));
    exit(1);
}
.fi
.ft R
.RE
.TP 8n
\f[I]fildes\fP
The original fildes, exactly as passed to the \f[I]fcntl\fP(2) system call.
.TP 8n
\f[I]command\fP
The original command, exactly as passed to the \f[I]fcntl\fP(2) system call.
.TP 8n
\f[I]arg\fP
The original arg, exactly as passed to the \f[I]fcntl\fP(2) system call
(or zero if the original call didn't need a mode argument,
or cast to long if it was a pointer).
.TP 8n
Returns:
The message explaining the error.  This message buffer is shared by all
libexplain functions which do not supply a buffer in their argument
list.  This will be overwritten by the next call to any libexplain
function which shares this buffer, including other threads.
.PP
\f[B]Note:\fP
This function is \f[B]not\fP thread safe, because it shares a return
buffer across all threads, and many other functions in this library.
.\" ------------------------------------------------------------------------
.SS libexplain_errno_fcntl
const char *libexplain_errno_fcntl(int errnum, int fildes, int command,
long arg);
.PP
The libexplain_errno_fcntl function is used to obtain an explanation of
an error returned by the \f[I]fcntl\fP(2) system call.  The least the message
will contain is the value of \f[CW]strerror(errnum)\fP, but usually it will do
much better, and indicate the underlying cause in more detail.
.PP
This function is intended to be used in a fashion similar to the
following example:
.RS
.ft CR
.nf
int ok = fcntl(fd, command, arg);
if (ok < 0)
{
    int err = errno;
    fprintf
    (
        stderr,
        '%s\n',
        libexplain_errno_fcntl(errnum, fd, command, arg)
    );
    exit(1);
}
.fi
.ft R
.RE
.TP 8n
\f[I]errnum\fP
The error value to be decoded, usually obtained from the \f[I]errno\fP
global variable just before this function is called.  This is necessary
if you need to call \f[B]any\fP code between the system call to be
explained and this function, because many libc functions will alter the
value of \f[I]errno\fP.
.TP 8n
\f[I]fildes\fP
The original fildes, exactly as passed to the \f[I]fcntl\fP(2) system call.
.TP 8n
\f[I]command\fP
The original command, exactly as passed to the \f[I]fcntl(2)\fP system call.
.TP 8n
\f[I]arg\fP
The original arg, exactly as passed to the \f[I]fcntl\fP(2) system call
(or zero if the original call didn't need a mode argument,
or cast to long if it was a pointer).
.TP 8n
Returns:
The message explaining the error.  This message buffer is shared by all
libexplain functions which do not supply a buffer in their argument
list.  This will be overwritten by the next call to any libexplain
function which shares this buffer, including other threads.
.PP
\f[B]Note:\fP
This function is \f[B]not\fP thread safe, because it shares a return
buffer across all threads, and many other functions in this library.
.\" ------------------------------------------------------------------------
.SS libexplain_message_fcntl
void libexplain_message_fcntl(char *message, int message_size, int fildes,
int command, long arg);
.PP
The libexplain_message_fcntl function is used to obtain an explanation
of an error returned by the \f[I]fcntl\fP(2) system call.  The least
the message will contain is the value of \f[CW]strerror(errno)\fP, but
usually it will do much better, and indicate the underlying cause in
more detail.
.PP
The \f[I]errno\fP global variable will be used to obtain the error value
to be decoded.
.PP
This function is intended to be used in a fashion similar to the
following example:
.RS
.ft CR
.nf
 int ok = fcntl(fd, cmd, arg);
if (ok < 0)
{
    char message[3000];
    libexplain_message_fcntl(message, sizeof(message), fd, cmd, arg);
    fprintf(stderr, '%s\n', message);
    exit(1);
}
.fi
.ft R
.RE
.TP 8n
\f[I]message\fP
The location in which to store the returned message.  Because a message
return buffer has been supplied, this function is thread safe.
.TP 8n
\f[I]message_size\fP
The size in bytes of the location in which to store the returned message.
.TP 8n
\f[I]fildes\fP
The original fildes, exactly as passed to the \f[I]fcntl\fP(2) system call.
.TP 8n
\f[I]command\fP
The original command, exactly as passed to the \f[I]fcntl\fP(2) system call.
.TP 8n
\f[I]arg\fP
The original arg, exactly as passed to the \f[I]fcntl\fP(2) system call
(or zero if the original call didn't need a mode argument,
or cast to long if it was a pointer).
.\" ------------------------------------------------------------------------
.SS libexplain_message_errno_fcntl
void libexplain_message_errno_fcntl(char *message, int message_size,
int errnum, int fildes, int command, long arg);
.PP
The libexplain_message_errno_fcntl function is used to obtain
an explanation of an error returned by the \f[I]fcntl\fP(2)
system call.  The least the message will contain is the value of
\f[CW]strerror(errnum)\fP, but usually it will do much better, and
indicate the underlying cause in more detail.
.PP
This function is intended to be used in a fashion similar to the
following example:
.RS
.ft CR
.nf
int ok = fcntl(fd, command, arg);
if (ok < 0)
{
    int errnum = errno;
    char message[3000];
    libexplain_message_fcntl(message, sizeof(message), errnum, fd,
        command, arg);
    fprintf(stderr, '%s\n', message);
    exit(1);
}
.fi
.ft R
.RE
.TP 8n
\f[I]message\fP
The location in which to store the returned message.  Because a message
return buffer has been supplied, this function is thread safe.
.TP 8n
\f[I]message_size\fP
The size in bytes of the location in which to store the returned message.
.TP 8n
\f[I]errnum\fP
The error value to be decoded, usually obtained from the \f[I]errno\fP
global variable just before this function is called.  This is necessary
if you need to call \f[B]any\fP code between the system call to be
explained and this function, because many libc functions will alter the
value of \f[I]errno\fP.
.TP 8n
\f[I]fildes\fP
The original fildes, exactly as passed to the \f[I]fcntl\fP(2) system call.
.TP 8n
\f[I]command\fP
The original command, exactly as passed to the \f[I]fcntl\fP(2) system call.
.TP 8n
\f[I]arg\fP
The original arg, exactly as passed to the \f[I]fcntl\fP(2) system call
(or zero if the original call didn't need a mode argument,
or cast to long if it was a pointer).
.\" ------------------------------------------------------------------------
.SH COPYRIGHT
.if n .ds C) (C)
.if t .ds C) \(co
libexplain version \*(v)
.br
Copyright \*(C) 2008 Peter Miller
.SH AUTHOR
Written by Peter Miller <millerp@canb.auug.org.au>
