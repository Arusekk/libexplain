.\"
.\" libexplain - Explain errno values returned by libc functions
.\" Copyright (C) 2008 Peter Miller
.\"
.\" This program is free software; you can redistribute it and/or modify
.\" it under the terms of the GNU General Public License as published by
.\" the Free Software Foundation; either version 3 of the License, or (at
.\" your option) any later version.
.\"
.\" This program is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
.\" General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public License
.\" along with this program. If not, see <http://www.gnu.org/licenses/>.
.\"/
.ds n) libexplain_remove
.TH libexplain_remove 3
.SH NAME
libexplain_remove \- explain remove(2) errors
.XX "libexplain_remove(3)" "explain remove(2) errors"
.SH SYNOPSIS
#include <libexplain/remove.h>
.sp 0.3
const char *libexplain_remove(const char *pathname);
.br
const char *libexplain_errno_remove(int errnum, const char *pathname);
.br
void libexplain_message_remove(char *message, int message_size,
const char *pathname);
.br
void libexplain_message_errno_remove(char *message, int message_size,
int errnum, const char *pathname);
.SH DESCRIPTION
These functions may be used to obtain explanations for
errors returned by the \f[I]remove\fP(2) system call.
.\" ----------------------------------------------------
.SS libexplain_remove
const char *libexplain_remove(const char *pathname);
.PP
The \f[B]libexplain_remove\fP function may be
used to describe errors returned by the \f[I]remove\fP()
system call.  The least the message will contain is the
value of \f[CW]strerror(errno)\fP, but usually it will
do much better, and indicate the underlying cause in more
detail.
.PP
The \f[I]errno\fP global variable will be used to obtain
the error value to be decoded.
.PP
This function is intended to be used in a fashion
similar to the following example:
.RS
.ft CW
.nf
if (remove(pathname) < 0)
{
    fprintf(stderr, "%s\en", libexplain_remove(pathname));
    exit(1);
}
.fi
.ft R
.RE
.TP 8n
\f[I]pathname\fP
The original pathname, exactly as passed to the \f[I]remove\fP(2) system call.
.TP 8n
Returns:
The message explaining the error.  This message buffer is
shared by all libexplain functions which do not supply a
buffer in their argument list.  This will be overwritten
by the next call to any libexplain function which shares
this buffer, including other threads.
.PP
\f[B]Note:\fP
This function is \f[B]not\fP thread safe, because it
shares a return buffer across all threads, and many other
functions in this library.
.\" ----------------------------------------------------
.SS libexplain_errno_remove
const char *libexplain_errno_remove(int errnum, const char *pathname);
.PP
The \f[B]libexplain_errno_remove\fP function
may be used to describe errors returned by the
\f[I]remove\fP() system call.  The least the
message will contain is the value of
\f[CW]strerror(errnum)\fP, but usually it will do much
better, and indicate the underlying cause in more detail.
.PP
This function is intended to be used in a fashion
similar to the following example:
.RS
.ft CW
.nf
if (remove(pathname) < 0)
{
    int err = errno;
    fprintf(stderr, "%s\en", libexplain_remove(err, pathname));
    exit(1);
}
.fi
.ft R
.RE
.TP 8n
\f[I]errnum\fP
The error value to be decoded, usually obtained from
the \f[I]errno\fP global variable just before this
function is called.  This is necessary if you need to call
\f[B]any\fP code between the system call to be explained
and this function, because many libc functions will alter
the value of \f[I]errno\fP.
.TP 8n
\f[I]pathname\fP
The original pathname, exactly as passed to the \f[I]remove\fP(2) system call.
.TP 8n
Returns:
The message explaining the error.  This message buffer is
shared by all libexplain functions which do not supply a
buffer in their argument list.  This will be overwritten
by the next call to any libexplain function which shares
this buffer, including other threads.
.PP
\f[B]Note:\fP
This function is \f[B]not\fP thread safe, because it
shares a return buffer across all threads, and many other
functions in this library.
.\" ----------------------------------------------------
.SS libexplain_message_removevoid libexplain_message_remove(char *message,
int message_size, const char *pathname);
.PP
The \f[B]libexplain_message_remove\fP
function may be used to describe errors returned by the
\f[I]remove\fP() system call.  The least the
message will contain is the value of
\f[CW]strerror(errno)\fP, but usually it will do much
better, and indicate the underlying cause in more detail.
.PP
The \f[I]errno\fP global variable will be used to obtain
the error value to be decoded.
.PP
This function is intended to be used in a fashion
similar to the following example:
.RS
.ft CW
.nf
if (remove(pathname) < 0)
{
    char message[3000];
    libexplain_message_remove(message, sizeof(message), pathname);
    fprintf(stderr, "%s\en", message);
    exit(1);
}
.fi
.ft R
.RE
.TP 8n
\f[I]message\fP
The location in which to store the returned message.
If a suitable message return buffer is supplied, this
function is thread safe.
.TP 8n
\f[I]message_size\fP
The size in bytes of the location in which to
store the returned message.
.TP 8n
\f[I]pathname\fP
The original pathname, exactly as passed to the \f[I]remove\fP(2) system call.
.\" ----------------------------------------------------
.SS libexplain_message_errno_remove
void libexplain_message_errno_remove(char *message, int message_size,
int errnum, const char *pathname);
.PP
The \f[B]libexplain_message_errno_remove\fP
function may be used to describe errors returned by
the \f[I]remove\fP() system call.  The least
the message will contain is the value of
\f[I]strerror(errnum)\fP, but usually it will do much
better, and indicate the underlying cause in more detail.
.PP
This function is intended to be used in a fashion
similar to the following example:
.RS
.ft CW
.nf
if (remove(pathname) < 0)
{
    int err = errno;
    char message[3000];
    libexplain_message_errno_remove(message, sizeof(message), err, pathname);
    fprintf(stderr, "%s\en", message);
    exit(1);
}
.fi
.ft R
.RE
.TP 8n
\f[I]message\fP
The location in which to store the returned message.
If a suitable message return buffer is supplied, this
function is thread safe.
.TP 8n
\f[I]message_size\fP
The size in bytes of the location in which to
store the returned message.
.TP 8n
\f[I]errnum\fP
The error value to be decoded, usually obtained from
the \f[I]errno\fP global variable just before this
function is called.  This is necessary if you need to call
\f[B]any\fP code between the system call to be explained
and this function, because many libc functions will alter
the value of \f[I]errno\fP.
.TP 8n
\f[I]pathname\fP
The original pathname, exactly as passed to the \f[I]remove\fP(2) system call.
.\" ----------------------------------------------------
.SH SEE ALSO
.TP 8n
\f[I]remove\fP
delete a name and possibly the file it refers to
.TP 8n
\f[I]libexplain_remove_or_die\fP
delete a file and report errors
.\" ----------------------------------------------------
.SH COPYRIGHT
.so etc/version.so
.if n .ds C) (C)
.if t .ds C) \(co
libexplain version \*(v)
.br
Copyright \*(C) 2008 Peter Miller
